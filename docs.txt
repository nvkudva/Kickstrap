Using this repository
=====================

The stable and stable-advanced branches contain the files you should use to create a new Kickstrap project.
However, non-stable branches are actually "master source" files. This creates the files for both stable and stable-advanced. So when creating stable-advanced, it actually compiles files that will be files to be compiled. For the stable branch, it merely creates a static html, no compile version of Kickstrap.

I call this a "master source" to avoid confusing these source files with the source files Kickstrap creates for Kickstrap Advanced.

I created Kickstrap Advanced and Basic because I understand some users would prefer not to use precompilers, but simple HTML, CSS, and JavaScript.

However, because you won't be compiling, you won't be able to take advantage of Roots' server creation, live-reloading, and heroku deployment.

Learning Jade, LESS, and CoffeeScript is actually not as hard as you think, so we recommend taking the leap to Kickstrap Advanced.

Compiling from master source
----------------------------

1. Make sure you have Grunt CLI installed
``npm install -g grunt-cli``

2. Run ``make`` to create both the basic and advanced versions or ``make build-basic`` or ``make build-advanced`` respectively.

Compiling
=========

Kickstrap will compile all resources in the ``kickstrap`` directory to a folder structure on the same level. 
By default, this compiled directory is called ``public``

So before compile you should see this:

    .
    ..
    kickstrap/

And after compile, you will see this:

    .
    ..
    kickstrap/
    public/

Adapters
--------

However, depending on the framework you are using with Kickstrap, you may need assets and view to compile into a specific
structure. For this need, there are adapters.

Adapters tell the Kickstrap compiler how to organize compiled assets and views and what folders to create. I've provided a 
Rails adapter by default.

The adapter can be set in ``compile.json``. 

	{
	   // Have your files compile into a directory structure
	   // specific to your framework. Rails included as an example.
	   // See the docs on how to create adapters.
	   compile-adapter: 'default'
	}

Changing ``compile-adapter`` from ``'default'`` to ``'rails'`` would result in the following export structure:

    .
    ..
    kickstrap/
    app/
      assets/
        javascripts/
        stylesheets/
      views/